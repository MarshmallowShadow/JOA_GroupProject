<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="course">

	<!-- 코스 추가 -->
	<insert id="insert" parameterType="coVo">
		<selectKey keyProperty="courseNo" resultType="int" order="BEFORE">
			select SEQ_COURSE_NO.nextval from dual
		</selectKey>
		<![CDATA[
			insert into course
			values (#{courseNo}, #{userNo}, #{title}, #{distance}, #{courseCate}, #{courseTime}, #{difficulty}, sysdate, #{openStatus})
		]]>
	</insert>
	
	
	<!-- 코스 제목 수정 -->
	<update id="updateTitle" parameterType="coVo">
		<![CDATA[
			update course
			set title = #{title}
			where course_no = #{courseNo}
		]]>
	</update>
	
	<!-- 코스 공개설정 수정 -->
	<update id="updateOpen" parameterType="coVo">
		<![CDATA[
			update course
			set open_status = #{openStatus}
			where course_no = #{courseNo}
		]]>
	</update>
	
	
	<!-- 코스 가져오기 -->
	<select id="selectCourse" resultType="coVo" parameterType="int">
		<![CDATA[
			select course_no courseNo
			        ,user_no userNo
			        ,title
			        ,distance
			        ,course_category courseCate
			        ,course_time courseTime
			        ,difficulty
			        ,to_char(reg_date, 'YYYY.MM.DD') regDate
			        ,open_status openStatus
			        from course
			where course_no = #{courseNo}
		]]>
	</select>
	
	
	<!-- 기록작성자 번호 가져오기 -->
	<select id="getUserNo" resultType="int" parameterType="int">
		<![CDATA[
			select user_no
			from course
			where course_no = #{courseNo}
		]]>
	</select>
	
	
	<!-- **************************************김수빙************************************** -->
	<!-- 좋아요/즐겨찾기/기록별 -->
	<select id="getBest" parameterType="map" resultType="map">
	
	<![CDATA[
		select *
		from(select rownum rn, course_no, title, l_count, f_count, r_count, x, y, file_path, distance
		     from (select c.course_no, c.title, nvl(l_count, 0) as l_count, nvl(f_count, 0) as f_count, nvl(r_count, 0) as r_count, x, y, file_path, distance
		           from point p, course c
                left outer join (SELECT count(*) l_count, course_no
		                 FROM liked_course
		                 GROUP by course_no)lc
                on  c.course_no = lc.course_no
                left outer join (SELECT count(*) f_count, course_no
		                 from favorite_course
		                 group by course_no) fc
                on c.course_no = fc.course_no
                left outer join (SELECT count(*) r_count, course_no
		                 FROM record
		                 group by course_no) rc
                on rc.course_no = c.course_no
                left outer join (SELECT file_path, course_no
		                 FROM record_img i, (SELECT MIN(record_no) "ma", course_no
		                                                FROM record
		                                                GROUP BY course_no) d       
		                where i.record_no = d."ma"
                        and order_no = 0) i
                on i.course_no = c.course_no
		        where c.course_no = p.course_no
                and p.order_no = 0
		        and course_category like #{course_cate}
		        order by ${count_cate} desc))
		where rn >=1
		and rn <=15
	]]>
	</select>
	
	<!-- 지도 검색 -->
	<select id="getList" parameterType="map" resultType="map">
	<![CDATA[
		select	c.course_no, c.title, c.distance, c.course_time, c.course_category, c.difficulty,
				id,
                file_path,
				x1, x2, y1, y2, max_order_no, min_order_no
		from users u,
				(select x1, x2, y1, y2, max_order_no, min_order_no, omax.course_no
                from(select x x2, y y2, p.course_no, p.order_no max_order_no 
                     from(select max(order_no) order_no, course_no 
                     		from point p 
                     		group by course_no) max,
                    				 point p where max.course_no = p.course_no and max.order_no = p.order_no) omax,
                    (select x x1, y y1, p.course_no, p.order_no min_order_no 
                     from(select min(order_no) order_no, course_no 
                     		from point p 
                     		group by course_no) min,
                     				point p where min.course_no = p.course_no and min.order_no = p.order_no) omin
              			  where omax.course_no = omin.course_no) p, course c left outer join (select file_path, 
              			  course_no from record_img i, 
              			  (select min(record_no) record_no, course_no 
              			  from record 
              			  group by course_no) j
                where j.record_no = i.record_no
                and order_no = 0) i
        on i.course_no = c.course_no
		where c.user_no = u.user_no
		and c.course_no = p.course_no
	]]>
		<choose>
			<when test="searchCate.equals('location')">
		<![CDATA[
			and x1 >= #{x1}
			and x1 <= #{x2}
			and y1 >= #{y1}
			and y1 <= #{y2}
		]]>
			</when>
			<otherwise>
		<![CDATA[
			and c.title like #{keyword}
		]]>
			</otherwise>
		</choose>
	</select>
	
</mapper>