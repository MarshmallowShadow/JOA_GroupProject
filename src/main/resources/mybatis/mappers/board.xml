<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board">

	<!-- 리스트 불러오기 + 페이징 -->
	<select id="board" parameterType="String" resultType="map">
		<![CDATA[
			select ort.rn
		           , ort.boardNo
		           , ort.boardCategory
		           , ort.title
		           , ort.id
		           , ort.viewCount
		           , ort.regDate
		           , ort.userNo
		           , ort.count
		           , ort.img
			from (select rownum rn
	                     , ot.boardNo
	                     , ot.boardCategory
	                     , ot.title
	                     , ot.id
	                     , ot.viewCount
	                     , ot.regDate
	                     , ot.userNo
	                     , ot.count
	                     , ot.img
		          from (select b.board_no boardNo
		          			   , b.board_category boardCategory
	                           , b.title
	                           , u.id
	                           , b.view_count viewCount
	                           , to_char(b.reg_date,'YYYY-MM-DD') regDate
	                           , b.user_no userNo
	                           , cn.count
	                           , bi.board_no img
	                   from users u, board b left outer join (select count(*) count
					                  						 	     , board_no
					                  						  from board_comment
					                  						  group by board_no) cn
					   on cn.board_no = b.board_no
					   left outer join (select board_img_no
					   						   , board_no
					   						   , save_name
					   						   , file_path
					   						   , order_no
					   					from BOARD_IMG) bi
					   on b.board_no = bi.board_no
	                   where u.user_no = b.user_no
	                   and title like #{keyword}
				       and board_category like #{boardCategory}
	                   order by b.board_no desc)ot
	                   )ort
			where rn>=#{startRnum}
			and rn<=#{endRnum}
		]]>
	</select>
	
	
	<!-- 전체 글갯수 구하기 -->
	<select id="selectTotalCnt" parameterType="map" resultType="int">
		<![CDATA[
			select count(*) count
			from board b, users u
			where b.user_no = u.user_no
			and title like #{keyword}
			and board_category like #{boardCategory}
		]]>
	</select>
	
	
	<!-- 게시판 글쓰기(전체) -->
	<insert id="insertAll" parameterType="BoardVo">
		<selectKey keyProperty="boardNo" resultType="int" order="BEFORE">
			select SEQ_BOARD_NO.nextval from dual
		</selectKey>
		<![CDATA[
			insert into board (board_no, user_no, course_no, event_no, board_category, title, content, reg_date, view_count)
			values(#{boardNo}, #{userNo}, #{courseNo}, #{eventNo}, #{boardCategory}, #{title}, #{content}, sysdate, 0)
		]]>
	</insert>
	
	
	<!-- 게시판 내용 읽기(상세페이지) -->
	<select id="read" parameterType="int" resultType="map">
		<![CDATA[
			select b.board_no boardNo
			        , b.board_category boardCategory
                    , b.title
                    , u.id
                    , b.content
                    , b.view_count viewCount
                    , to_char(b.reg_date,'YYYY-MM-DD') regDate
                    , b.user_no userNo
                    , u.id
                    , b.course_no courseNo
                    , b.event_no eventNo
                    , c.ctitle
                    , c.distance
                    , c.courseCategory
                    , c.courseTime
                    , c.difficulty
                    , ee.eventNo
                    , ee.eventTitle
                    , ee.x1, ee.x2, ee.y1, ee.y2
                    , ee.regStart
                    , ee.regEnd
                    , ee.eventTitle
                    , ee.eCourseCategory
                    , ee.minOrderNo
                    , ee.maxOrderNo
                    , ee.joinMax
                    , ee.count
			from users u, board b
			left outer join (select course_no courseNo
			  						, title ctitle
                                    , distance
                                    , course_category courseCategory
                                    , course_time courseTime
                                    , difficulty
                             from course) c
            on b.course_no = c.courseNo
            left outer join (select e.event_no eventNo
								    , x1, x2, y1, y2
						   			, to_char(e.reg_start, 'YYYY/MM/DD') regStart
					                , to_char(e.reg_end, 'YYYY/MM/DD') regEnd
					                , e.event_title eventTitle
					                , c.course_category eCourseCategory
					                , p.min_order_no minOrderNo
					                , p.max_order_no maxOrderNo
					                , e.join_max joinMax
					                , j.count
          					 from course c,(select x1, x2, y1, y2
          					  					   , max_order_no
          					  					   , min_order_no
          					  					   , omax.course_no
   				   							from (select x x2, y y2
   				   							 			 , p.course_no
   				   							 			 , p.order_no max_order_no 
           										  from(select max(order_no) order_no
           										  			  , course_no 
           											   from point p 
           					 						   group by course_no) max, point p 
           										  where max.course_no = p.course_no 
           										  and max.order_no = p.order_no) omax
								  , (select x x1, y y1
										    , p.course_no
										    , p.order_no min_order_no 
									 from(select min(order_no) order_no
												 , course_no 
			           					  from point p 
			           					  group by course_no) min, point p 
	           					  	 where min.course_no = p.course_no 
	           					  	 and min.order_no = p.order_no) omin
      					 	 where omax.course_no = omin.course_no) p
         	  	 		 	 , event e left outer join (select count(*) count
          		  		  						      	  	   , event_no
          		   								   		from event_joined
          		   								   		group by event_no) j
            			 	 on e.event_no = j.event_no
            where c.course_no = e.course_no
            and c.course_no = p.course_no)ee
            on b.event_no = ee.eventNo
	        where u.user_no = b.user_no
			and b.board_no = #{no}
		]]>
	</select>
	
	
	<!-- 게시판 조회수 -->
	<update id="boardHit" parameterType="int">
		<![CDATA[
			update board
			set view_count = view_count + 1
			where board_no = #{no}
		]]>
	</update>
	
	
	<!-- 게시판 삭제 -->
	<delete id="delete" parameterType="int">
		<![CDATA[
			delete from board
			where board_no = #{boardNo}
		]]>
	</delete>

</mapper>